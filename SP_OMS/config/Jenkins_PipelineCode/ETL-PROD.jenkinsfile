pipeline{
    agent{
        label "Build_Slave"
    }

	parameters{
        string(name: "CODE_REPO", defaultValue: "ETL-ReverseServiceability", description: "code repository")
        string(name: "BRANCH_TAG_NAME",description: "Branch to Deploy")
        choice(name: 'LOCATION', choices: ['refs/heads', 'refs/tags'], description: 'Choose Location')
		choice(name: 'ENVIRONMENT', choices: ['PROD'], description: 'Provide the Environment')
        //string(name: "URL", defaultValue: "https://qa1.tataunistore.com/", trim: false, description: "enter the URL")
        string(name: "EMAIL_RECIPIENTS", defaultValue: "tuldevopsteam@tataunistore.com", description: "Add email addresses with comma separated values")
    }

    environment{
	APPNAME = "OMSprod"
        WORKING_DIR_HOME = "ETL-ReverseServiceability"
        S3_ARTIFACTS_BUCKET = "tul-etl-reverseserviceability-artifacts"
        COMMIT_ID = "$GIT_COMMIT"
	TARGET_DEPLOYMENT_GROUP = "ETL-ReverseServiceability-PROD"
	TARGET_DEPLOYMENT_APP = "OMS${params.ENVIRONMENT.toLowerCase()}"
	JOB_BUILD_NO = "$BUILD_NUMBER"
        CONFIG_REPO = "TE_CONFIG_REPO_FOR_AWS"
	CONFIG_BRANCH = "master"
        TARGET_DEPLOYMENT_S3_BUCKET = "tul-etl-reverseserviceability-deployments"
	JOBNAME = "${JOB_NAME}"
        WORKSPACE="/ciapp/jenkins/workspace/${env.JOBNAME}"
	TARGET_DEPLOYMENT_BUCKET_SUFFIX = "${params.ENVIRONMENT}"
	TARGET_DEPLOYMENT_CONFIG = "CodeDeployDefault.OneAtATime"
        ZIP_FILE_ETL_ReverseServiceability = "etl-reverseServiceability-${params.ENVIRONMENT}-${env.JOB_BUILD_NO}-${params.BRANCH_TAG_NAME}-${env.TARGET_DEPLOYMENT_GROUP}.zip"
	CONFIG_WORKSPACE = "/ciapp/jenkins/workspace/GitConfigCodePull"
	BUILDNAME = "${params.ENVIRONMENT}_${BRANCH_TAG_INFO}"
	ZIP_FILE_NAME = "etl-reverseServiceability-${params.ENVIRONMENT}-${env.JOB_BUILD_NO}-${params.BRANCH_TAG_NAME}-${env.TARGET_DEPLOYMENT_GROUP}.zip"
        BUILD_USER = "${currentBuild.getBuildCauses()[0].shortDescription} / ${currentBuild.getBuildCauses()[0].userId}"
    }

    stages{
        
		stage('Initialization'){
            steps{
                script{
                    currentBuild.description = "${params.ENVIRONMENT}-${params.BRANCH_TAG_NAME}"
                } 
            }
        }
        
        stage('Repo Checkout'){
            parallel{
                stage('Code Repo Checkout'){
                    steps{
				        git branch: "${params.BRANCH_TAG_NAME}", credentialsId: '255d5f87-8f1c-429b-82b3-f9334d361aae' , url: "https://github.com/tcs-chennai/${params.CODE_REPO}.git"
                    }
                }

                stage('Config Repo Checkout'){
                    steps{
                        dir('CONFIG_REPO'){
                            git branch: "${env.CONFIG_BRANCH}", credentialsId: '255d5f87-8f1c-429b-82b3-f9334d361aae' , url: "https://github.com/tcs-chennai/${env.CONFIG_REPO}.git"
                        }
                    }
                }
            }
        }
        
        stage('Create build artifactory file'){
            steps{
                sh '''
                rm -rf $WORKSPACE/src/main/resources/application.properties
                cp $WORKSPACE/CONFIG_REPO/config/oms/$ENVIRONMENT/etlapp/application.properties $WORKSPACE/src/main/resources/
                cd $WORKSPACE
                /ciapp/apache-maven-3.3.3/bin/mvn clean install
                mkdir -p build/libs/$ENVIRONMENT /ciapp/ETL_Operations/$ENVIRONMENT
                cp target/ETL-ReverseServiceability-0.0.1-SNAPSHOT.jar build/libs/$ENVIRONMENT
                mv build/libs/$ENVIRONMENT/ETL-ReverseServiceability-0.0.1-SNAPSHOT.jar build/libs/$ENVIRONMENT/ETL-ReverseServiceability.jar
                '''
            }
        }
       
        
        stage('Uploading artifact to S3 bucket'){
            steps{
		        sh '''
                    sh /ciapp/CICD-Scripts/CICD-BackendScripts/ETL_s3_upload_PROD.sh ${ENVIRONMENT} ${ZIP_FILE_ETL_ReverseServiceability} ${S3_ARTIFACTS_BUCKET}
                '''
            }    
        }
        
        stage('CodeDeploy'){
            steps{
              script{
                    build job: 'PRODUCTION/CodeDeploy_PROD', parameters: [string(name: 'TARGET_DEPLOYMENT_APP', value: "${TARGET_DEPLOYMENT_APP}"), string(name: 'TARGET_DEPLOYMENT_GROUP', value: "${TARGET_DEPLOYMENT_GROUP}"), string(name: 'TARGET_DEPLOYMENT_CONFIG', value: "${TARGET_DEPLOYMENT_CONFIG}"), string(name: 'TARGET_DEPLOYMENT_S3_BUCKET', value: "${TARGET_DEPLOYMENT_S3_BUCKET}"), string(name: 'TARGET_DEPLOYMENT_BUCKET_SUFFIX', value: "${TARGET_DEPLOYMENT_BUCKET_SUFFIX}"), string(name: 'ENVIRONMENT', value: "${ENVIRONMENT}"), string(name: 'S3_ARTIFACTS_BUCKET', value: "${S3_ARTIFACTS_BUCKET}"), string(name: 'ZIP_FILE_NAME', value: "${ZIP_FILE_NAME}")] 
               }
            }
        }

        stage('Clean Work Space') {
            steps{
              cleanWs()
            }
        }
    }
    

    post{
        success{
            echo "Build Successful"
            script{
                env.BUILDER_TAG = "${BUILD_TAG}"
                env.BUILDER_URL = "${BUILD_URL}"
                env.STATUS= "${currentBuild.currentResult}"
                env.BUILDER_USER= "${env.BUILD_USER}"
                emailext body: '''${SCRIPT, template="success-mail.template"}''',
                mimeType: 'text/html',
                subject: "${env.JOB_NAME}",
                to: "${params.EMAIL_RECIPIENTS}"
            }
        }

        failure{
            echo "Build Failed"
            cleanWs()
             script{
                env.BUILDER_TAG = "${BUILD_TAG}"
                env.BUILDER_URL = "${BUILD_URL}"
                env.STATUS= "${currentBuild.currentResult}"
                env.BUILDER_USER= "${env.BUILD_USER}"
                emailext body: '''${SCRIPT, template="failed-mail.template"}''',
                mimeType: 'text/html',
                subject: "${env.JOB_NAME}",
                to: "${params.EMAIL_RECIPIENTS}"
            }
        }

        aborted{
            echo "Build Aborted"
            cleanWs()
             script{
                env.BUILDER_TAG = "${BUILD_TAG}"
                env.BUILDER_URL = "${BUILD_URL}"
                env.STATUS= "${currentBuild.currentResult}"
                env.BUILDER_USER= "${env.BUILD_USER}"
                emailext body: '''${SCRIPT, template="aborted-mail.template"}''',
                mimeType: 'text/html',
                subject: "${env.JOB_NAME}",
                to: "${params.EMAIL_RECIPIENTS}"
            }
        }
    }
}
