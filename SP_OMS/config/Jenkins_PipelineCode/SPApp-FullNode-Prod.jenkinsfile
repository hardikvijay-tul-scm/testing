pipeline{
    agent{
        label "master"
    }

    parameters{
        string(name: "BRANCH_TAG_NAME",description: "Branch to Deploy")
        string(name: "CODE_REPO", defaultValue: 'SELLER_PORTAL', description: "Code repositoryy")
        choice(name: 'LOCATION', choices: ['refs/heads','refs/tags'], description: 'Select location to Deploy')
        choice(name: 'ENVIRONMENT', choices: ['PROD'], description: 'Select Environment to Deploy')
        string(name: 'EMAIL_RECIPIENTS', defaultValue: 'tuldevopsteam@tataunistore.com', description: "add email addresses with comma in between")
    }

    environment{
        APPNAME="SP${params.ENVIRONMENT.toLowerCase()}"
        CONFIG_REPO="TE_CONFIG_REPO_FOR_AWS"
        CONFIG_BRANCH="master"
        BUILD_XML_PATH="$WORKSPACE/build.xml"
        ANT_PATH="/ciapp/apache-ant-1.9.4/bin/ant"
        S3_ARTIFACTS_BUCKET="tul-sp-artifacts"
        TARGET_DEPLOYMENT_S3_BUCKET="tul-sp-deployment"
        TARGET_DEPLOYMENT_BUCKET_SUFFIX="SP-Tomcat-Prod"
        TARGET_DEPLOYMENT_APP="SP${params.ENVIRONMENT.toLowerCase()}"
        TARGET_DEPLOYMENT_GROUP="SP-Tomcat-Prod"
        TARGET_DEPLOYMENT_CONFIG_PHASE2="CodeDeployDefault.OneAtATime"
        TARGET_DEPLOYMENT_CONFIG_PHASE1="CodeDeployDefault.AllAtOnce"
        TARGET_DEPLOYMENT_GROUP_ASSIST="SP-Tomcat-Prod"
        TARGET_DEPLOYMENT_GROUP_ASG="SP-Tomcat-Prod"
        JOB_BUILD_NO="$BUILD_NUMBER"
        COMMIT_ID="$GIT_COMMIT"
        PROPERTIES_PATH="/ciapp/jenkins/workspace/PRODUCTION/SP_GitConfigCodeCloner_Prod/${params.ENVIRONMENT}/config/sp/${params.ENVIRONMENT}/spapp/"
        //PROPERTIES_PATH="${WORKSPACE}/AWS/${params.ENVIRONMENT}/config/sp/${params.ENVIRONMENT}/spapp/"
        ZIP_FILE_NAME="tul-sp-tomcat-full-node-${params.ENVIRONMENT}-${env.JOB_BUILD_NO}-${params.BRANCH_TAG_NAME}-${env.COMMIT_ID}-${env.TARGET_DEPLOYMENT_GROUP}.zip"
        ZIP_FILE_ASSIST="tul-sp-tomcat-full-node-${params.ENVIRONMENT}-${env.JOB_BUILD_NO}-${params.BRANCH_TAG_NAME}-${env.COMMIT_ID}-${env.TARGET_DEPLOYMENT_GROUP}.zip"
        ZIP_FILE_ASG="tul-sp-tomcat-full-node-${params.ENVIRONMENT}-${env.JOB_BUILD_NO}-${params.BRANCH_TAG_NAME}-${env.COMMIT_ID}-${env.TARGET_DEPLOYMENT_GROUP}.zip"
    }
    
    stages{
        stage('Initialization'){
            steps{
                script{
                    currentBuild.description = "${params.ENVIRONMENT}-${params.BRANCH_TAG_NAME}"
                }
            }
        }

        stage('repo checkout'){
            parallel{
                stage('code repo Checkout'){
                    steps{
                        git branch: "${params.BRANCH_TAG_NAME}", credentialsId: '255d5f87-8f1c-429b-82b3-f9334d361aae' , url: "https://github.com/tcs-chennai/${CODE_REPO}.git"
                    }
                }

                stage('Configration Code Checkout'){
                    steps{
                        echo "${params.ZIP_FILE_NAME}"
                        echo "${params.ENVIRONMENT}"
                        build job:"PRODUCTION/SP_GitConfigCodeCloner_Prod", parameters: [string(name:"CONFIG_BRANCH", value:  "${env.CONFIG_BRANCH}"), string(name:"CONFIG_REPO", value:"${env.CONFIG_REPO}"), string(name:"ENVIRONMENT", value:"${params.ENVIRONMENT}")]
                    }
                }
            }
        }
        

        stage('Build Artifact and upload to S3'){
            steps{
                script{
                    env.ZIP_FILE_ASG="${env.ZIP_FILE_NAME}"+"-${params.COMMIT_ID}.zip"
                }  
                build job: "PRODUCTION/SP-Build-Artificat-S3-Upload-Prod", parameters: [string(name: "ENVIRONMENT", value:"${params.ENVIRONMENT}"), string(name: "BUILD_XML_PATH", value:"${env.BUILD_XML_PATH}"), string(name: "ANT_PATH", value:"${env.ANT_PATH}"), string(name: "S3_ARTIFACTS_BUCKET", value: "${env.S3_ARTIFACTS_BUCKET}"), string(name: "ZIP_FILE_ASG", value:"${env.ZIP_FILE_ASG}"), string(name: "CONFIG_BRANCH", value:"${env.CONFIG_BRANCH}"), string(name: "CONFIG_REPO", value:"${env.CONFIG_REPO}"),string(name: "PROPERTIES_PATH", value:"${env.PROPERTIES_PATH}")]
            }
        }

        
        stage('Deploy artifact'){
            steps{
                build job: "PRODUCTION/CodeDeploy_Prod_SP_phase1_v2", parameters: [string(name: "TARGET_DEPLOYMENT_APP", value: "${env.TARGET_DEPLOYMENT_APP}"), string(name: "TARGET_DEPLOYMENT_GROUP", value: "${env.TARGET_DEPLOYMENT_GROUP}"), string(name: "TARGET_DEPLOYMENT_CONFIG", value: "${env.TARGET_DEPLOYMENT_CONFIG_PHASE1}"), string(name: "TARGET_DEPLOYMENT_S3_BUCKET", value: "${env.TARGET_DEPLOYMENT_S3_BUCKET}"), string(name: "ZIP_FILE_NAME", value: "${env.ZIP_FILE_NAME}"), string(name: "S3_ARTIFACTS_BUCKET", value: "${env.S3_ARTIFACTS_BUCKET}"), string(name: "ENVIRONMENT", value: "${params.ENVIRONMENT}"), string(name: "TARGET_DEPLOYMENT_BUCKET_SUFFIX", value: "${params.ENVIRONMENT}"), string(name: "BRANCH_NAME", value: ""), string(name: "JOB_BUILD_NO", value: "${}"), string(name: "COMMIT_ID", value: ""), string(name: "BRANCH_TAG_NAME", value: "${params.BRANCH_TAG_NAME}")]
            }
        }

        stage('Restart the service'){
            steps{
                build job: "PRODUCTION/CodeDeploy_Prod_SP_phase2_v2", parameters: [string(name: "TARGET_DEPLOYMENT_APP", value: "${env.TARGET_DEPLOYMENT_APP}"), string(name: "TARGET_DEPLOYMENT_GROUP", value: "${env.TARGET_DEPLOYMENT_GROUP}"), string(name: "TARGET_DEPLOYMENT_CONFIG", value: "${env.TARGET_DEPLOYMENT_CONFIG_PHASE2}"), string(name: "TARGET_DEPLOYMENT_S3_BUCKET", value: "${env.TARGET_DEPLOYMENT_S3_BUCKET}"), string(name: "ZIP_FILE_NAME", value: "${env.ZIP_FILE_NAME}"), string(name: "S3_ARTIFACTS_BUCKET", value: "${env.S3_ARTIFACTS_BUCKET}"), string(name: "ENVIRONMENT", value: "${params.ENVIRONMENT}"), string(name: "TARGET_DEPLOYMENT_BUCKET_SUFFIX", value: "${params.ENVIRONMENT}"), string(name: "BRANCH_NAME", value: ""), string(name: "JOB_BUILD_NO", value: "${}"), string(name: "COMMIT_ID", value: ""), string(name: "BRANCH_TAG_NAME", value: "${params.BRANCH_TAG_NAME}")]
            }
        }
        
        stage('Clean Work Space') {
            steps{
              cleanWs()
              sh'''
              rm -rf /ciapp/SP_FILES_ASG/*
              rm -rf /data/DeploymetWars/*
              '''
            }
        }
    }
}
